{"version":3,"sources":["components/FiveDayForecast.js","components/CurrentWeather.js","components/HomePage.js","components/Nav.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["FiveDayForecast","props","state","five_day_forecast","is_loaded","fetch","this","city","unit","then","res","json","setState","list","map","each_forecast","key","dt","weather","className","id","unixTime","Date","toLocaleTimeString","split","slice","join","unix","toLocaleDateString","src","icon","alt","description","Math","round","main","temp","React","Component","CurrentWeather","name","date","wind","sys","handelTime","result","country","temp_max","temp_min","feels_like","speed","sunrise","sunset","HomePage","handel_map_click","txt","map_clicked","onClick","bind","Nav","to","Search","value","handleChange","handleSubmit","event","target","preventDefault","onSubmit","type","onChange","placeholder","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e9eca277.chunk.js","sourcesContent":["import React from 'react';\nimport './Styles.css'\n\nclass FiveDayForecast extends React.Component {\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            five_day_forecast: [],\n            is_loaded: false,    \n        };\n    }\n    componentDidMount(){\n        fetch(\"https://api.openweathermap.org/data/2.5/forecast?q=\"+this.props.city+\"&appid=16ce40370539cf4b81309fbb19b4fcda&units=\"+this.props.unit+\"&lang=sv\")\n        .then(res => res.json())\n        .then( json => {\n            this.setState({\n                is_loaded: true, \n                five_day_forecast: json.list,\n            })\n        })\n    }\n\n    render(){\n        const { is_loaded, five_day_forecast } = this.state;\n\n        \n        //handelTime() is a function that converts Unix time to human time \n        function handelTime(unixTime){\n            const date = new Date(unixTime*1000).toLocaleTimeString(\"sv-SE\");\n            let splittedString = date.split(\":\");\n            let time  = splittedString.slice(0,-1).join(':');\n            return time;\n\n        }\n\n        //handelTime() is a function that converts Unix date to human date \n        function handelDate(unix){\n            let date = new Date(unix*1000).toLocaleDateString(\"sv-SE\");\n            return date;\n        }\n        \n\n        if (!is_loaded){\n            return <div>Loading...</div>\n        }\n        else{\n           return (\n                <div>\n                    {five_day_forecast.map( each_forecast => (\n\n                        <div key={each_forecast.dt}>\n\n                            {each_forecast.weather.map(weather => (\n                                \n                                <div className=\"each_forecast\" key={weather.id}>\n                                    \n                                    <div className=\"data_time\">\n                                        <h3>{handelTime(each_forecast.dt)}</h3>\n                                        <p>{handelDate(each_forecast.dt)}</p>\n                                    </div>\n\n                                    <div>\n                                        <img src={\"http://openweathermap.org/img/wn/\"+ weather.icon +\"@2x.png\"} alt=\"weather_icon\"/>\n                                        <p>{ weather.description }</p>\n                                    </div>\n\n                                    <div> \n                                        <h2>{ Math.round(each_forecast.main.temp) }Â°</h2>\n                                    </div>\n\n                                </div>\n\n                            ))} \n                        </div>    \n                    ))}        \n                </div>\n            );\n        }\n\n\n\n    }\n}\n\n  \nexport default FiveDayForecast;\n","import React from 'react';\nimport './Styles.css';\n\nimport FiveDayForecast from './FiveDayForecast.js'\n\n\nclass CurrentWeather extends React.Component {\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            name: \"\",\n            date: \"\",\n            weather: [],\n            main: [],\n            wind: [],\n            sys: [],\n            is_loaded: false, \n        };\n    }\n\n   \n\n    componentDidMount(){\n        fetch(\"https://api.openweathermap.org/data/2.5/weather?q=\"+this.props.city+\"&appid=16ce40370539cf4b81309fbb19b4fcda&units=\"+this.props.unit+\"&lang=sv\")\n        .then(res => res.json())\n        .then( json => {\n            this.setState({\n                is_loaded: true, \n                name: json.name,\n                date: json.dt,\n                weather: json.weather,\n                main: json.main,\n                wind: json.wind,\n                sys: json.sys,          \n            })\n        })\n    }\n\n\n    render(){\n        const { is_loaded, name, date, weather, main, wind, sys} = this.state;\n\n        \n        //handelTime() is a function that converts Unix time to human time \n        function handelTime(unixTime){\n            const date = new Date(unixTime*1000).toLocaleTimeString(\"sv-SE\");\n            let splittedString=date.split(\":\");\n            let time  = splittedString.slice(0,-1).join(':');\n            return time;\n\n        }\n\n        //handelTime() is a function that converts Unix date to human date \n        function handelDate(unix){\n            let date = new Date(unix*1000).toLocaleDateString(\"sv-SE\");\n            return date;\n        }\n        \n\n        if (!is_loaded){\n            return <div>Loading...</div>\n        }\n        else{\n\n            return (\n                <div>\n                    <div className=\"current_weather_div\">\n\n                        {weather.map(result => (\n                                        \n                            <div className=\"left_side_div\" key={result.id}>\n                                \n                                <h2>{name}, {sys.country}</h2>\n                                <p>{handelDate(date)}</p>\n                                <p>{result.description}</p>\n                            \n                                <div>\n                                    <img src={\"http://openweathermap.org/img/wn/\"+result.icon+\"@2x.png\"} alt=\"current_weather_icon\"/>\n                                    <h1>{main.temp}Â°</h1>\n                                </div>\n\n                            </div>\n                        ))}\n\n                        <div className=\"right_side_info\">\n                            <div>\n                                <li>Maximum Temperatur:  {main.temp_max}Â°</li>\n                                <li>Minimum Temperatur:  {main.temp_min}Â°</li>    \n                                <li>KÃ¤nns som:  {main.feels_like}Â°</li>\n\n                            </div>\n                            <div>\n                                <li>Vindhastighet:  {wind.speed} m/s</li>\n                                <li>SoluppgÃ¥ng:  {handelTime(sys.sunrise)}</li>\n                                <li>SolnedgÃ¥ng:  {handelTime(sys.sunset)}</li>\n                            </div>\n                        </div>\n\n                    </div>\n\n                    <FiveDayForecast city={this.props.city} unit={this.props.unit} />\n\n                </div>           \n            );\n        }\n    }\n}\n  \nexport default CurrentWeather;","import React from 'react';\nimport './Styles.css';\nimport CurrentWeather from './CurrentWeather.js';\n\n\n\n\nclass HomePage extends React.Component {\n    constructor(props){\n        super(props);\n        \n        this.state = {\n            map_clicked: false,\n            city: \"stockholm\"\n        };\n    }\n\n    handel_map_click = (txt) =>{\n       \n        this.setState({\n            map_clicked: true, \n            city: txt,\n        })\n    }\n\n\n    render(){\n        const { map_clicked, city} = this.state;\n        \n        if (!map_clicked){\n            return(\n                <div className=\"home_page\">\n                    <div className=\"sweden_img\" >\n                        <div id=\"lulea\" onClick={ this.handel_map_click.bind(this, \"luleÃ¥\") }></div>\n                        <div id=\"umea\" onClick={ this.handel_map_click.bind(this, \"umeÃ¥\") }></div>\n                        <div id=\"harnosand\" onClick={ this.handel_map_click.bind(this, \"hÃ¤rnÃ¶sand\") }></div>\n                        <div id=\"gavle\" onClick={ this.handel_map_click.bind(this, \"gÃ¤vle\") }></div>\n                        <div id=\"uppsala\" onClick={ this.handel_map_click.bind(this, \"uppsala\") }></div>\n                        <div id=\"stockholm\" onClick={ this.handel_map_click.bind(this, \"stockholm\") }></div>\n                        <div id=\"nykoping\" onClick={ this.handel_map_click.bind(this, \"nykÃ¶ping\") }></div> \n                        <div id=\"goteborg\" onClick={ this.handel_map_click.bind(this, \"gÃ¶teborg\") } ></div>\n                        <div id=\"halmstad\" onClick={ this.handel_map_click.bind(this, \"halmstad\") } ></div>\n                        <div id=\"malmo\" onClick={ this.handel_map_click.bind(this, \"malmÃ¶\") }></div>\n                    </div>\n                </div>\n            );\n        }\n        else{\n            return <CurrentWeather city={city} unit=\"metric\"/>        \n        }\n        \n    }\n}\n\nexport default HomePage;\n\n//<img className=\"sweden_img\" src={'/images/sweden.png'} /> ","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport './Styles.css';\n\nfunction Nav(){\n    \n    return(\n        <nav className=\"nav_bar\">\n            <Link to=\"/\"><li>Hem</li></Link>\n            <Link to=\"/search\"><li>SÃ¶ka</li></Link>\n        </nav>\n    );\n}\n\nexport default Nav;","import React from 'react';\nimport './Styles.css';\nimport CurrentWeather from './CurrentWeather.js';\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      is_loaded: false,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value,\n    \n    });\n  }\n\n  handleSubmit(event) {\n    this.setState({\n      is_loaded: true,\n    });\n    event.preventDefault();\n  }\n\n  render() {\n\n    if(this.state.is_loaded === true){\n      return <CurrentWeather city={this.state.value} unit={\"metric\"} />\n    }else{\n      return (\n        <form className=\"search_form\" onSubmit={this.handleSubmit}>\n          <input className=\"search_input\" type=\"text\" value={this.state.value} onChange={this.handleChange} placeholder=\"t.ex. Barcelona\"/>\n          <input className=\"search_submit\" type=\"submit\" value=\"SÃ¶ka\" />\n        </form>\n      );\n    }\n    \n  }\n}\n  export default Search;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter, Switch, Route} from 'react-router-dom';\n\nimport HomePage from './components/HomePage.js';\nimport Nav from './components/Nav.js';\nimport Search from './components/Search.js';\n\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div>\n        <Nav />\n        <Switch>\n          <Route path=\"/\" exact component={HomePage} />\n          <Route path=\"/search\" component={Search} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}